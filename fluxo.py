# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fluxo.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sqlite3
from PyQt5.QtCore import Qt,QRect
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QLCDNumber,QRadioButton,QHeaderView,QApplication, QMainWindow, QVBoxLayout, QWidget, QLineEdit, QTableWidget, QTableWidgetItem,QShortcut
from PyQt5.QtGui import QKeySequence
from datetime import datetime
from collections import Counter
#import serial



class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(400, 522)
        self.tableWidget = QtWidgets.QTableWidget(Dialog)
        self.tableWidget.setGeometry(QtCore.QRect(10, 250, 381, 261))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.Entrada = QtWidgets.QLineEdit(Dialog)
        self.Entrada.setGeometry(QtCore.QRect(60, 40, 113, 22))
        self.Entrada.setClearButtonEnabled(False)
        self.Entrada.setObjectName("Entrada")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(10, 40, 49, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(210, 40, 61, 16))
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(270, 40, 113, 22))
        self.lineEdit.setObjectName("lineEdit")
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(150, 10, 101, 16))
        self.label_3.setObjectName("label_3")
        self.AdicionarEntrada = QtWidgets.QPushButton(Dialog)
        self.AdicionarEntrada.setGeometry(QtCore.QRect(120, 80, 75, 24))
        self.AdicionarEntrada.setObjectName("AdicionarEntrada")
        self.CancelarEntrada = QtWidgets.QPushButton(Dialog)
        self.CancelarEntrada.setGeometry(QtCore.QRect(200, 80, 75, 24))
        self.CancelarEntrada.setObjectName("CancelarEntrada")
        self.Saida = QtWidgets.QLineEdit(Dialog)
        self.Saida.setGeometry(QtCore.QRect(60, 160, 113, 22))
        self.Saida.setClearButtonEnabled(False)
        self.Saida.setObjectName("Saida")
        self.DescricaoSaida = QtWidgets.QLineEdit(Dialog)
        self.DescricaoSaida.setGeometry(QtCore.QRect(270, 160, 113, 22))
        self.DescricaoSaida.setObjectName("DescricaoSaida")
        self.AdicionarSaida = QtWidgets.QPushButton(Dialog)
        self.AdicionarSaida.setGeometry(QtCore.QRect(120, 200, 75, 24))
        self.AdicionarSaida.setObjectName("AdicionarSaida")
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(210, 160, 61, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(Dialog)
        self.label_5.setGeometry(QtCore.QRect(20, 160, 49, 16))
        self.label_5.setObjectName("label_5")
        self.Cancelar = QtWidgets.QPushButton(Dialog)
        self.Cancelar.setGeometry(QtCore.QRect(200, 200, 75, 24))
        self.Cancelar.setObjectName("Cancelar")
        self.label_6 = QtWidgets.QLabel(Dialog)
        self.label_6.setGeometry(QtCore.QRect(150, 130, 101, 16))
        self.label_6.setObjectName("label_6")
        self.entradaa = QRadioButton(Dialog)
        self.entradaa.setObjectName(u"entradaa")
        self.entradaa.setGeometry(QRect(20, 70, 89, 20))
        self.saidaa = QRadioButton(Dialog)
        self.saidaa.setObjectName(u"saidaa")
        self.saidaa.setGeometry(QRect(20, 130, 89, 20))
        self.lcdentrada = QLCDNumber(Dialog)
        self.lcdentrada.setObjectName(u"lcdentrada")
        self.lcdentrada.setGeometry(QRect(150, 230, 64, 21))
        #self.lcdentrada.setSmallDecimalPoint(True)
        self.lcdentrada.setDigitCount(7)
        self.lcdsaida = QLCDNumber(Dialog)
        self.lcdsaida.setObjectName(u"lcdsaida")
        self.lcdsaida.setGeometry(QRect(260, 230, 64, 21))
        #self.lcdsaida.setSmallDecimalPoint(True)
        self.lcdsaida.setDigitCount(7)
                # Defina um estilo de folha de estilo (stylesheet) para alterar a cor dos dígitos
        stylesheet = """
            QLCDNumber {
                color: red;  /* Cor dos dígitos (vermelho no exemplo) */
                background-color: black;  /* Cor de fundo (preto no exemplo) */
            }
        """

        self.lcdsaida.setStyleSheet(stylesheet)
        self.lcdentrada.setStyleSheet(stylesheet)


        
                
        self.fluxo()
        self.CancelarEntrada.clicked.connect(self.limpar)
        self.Cancelar.clicked.connect(self.limpar)
        
        self.AdicionarEntrada.clicked.connect(self.addentrada)
        self.AdicionarSaida.clicked.connect(self.addsaida)

        self.retranslateUi(Dialog)
        shortcut = QShortcut(QKeySequence(Qt.Key_Return), self.DescricaoSaida)
        shortcut1 = QShortcut(QKeySequence(Qt.Key_Return), self.lineEdit)
        shortcut1.activated.connect(self.addentrada)
        shortcut.activated.connect(self.addsaida)

        QtCore.QMetaObject.connectSlotsByName(Dialog)

        
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.Entrada.setPlaceholderText(_translate("Dialog", "Adicionar Entrada"))
        self.label.setText(_translate("Dialog", "Entrada:"))
        self.label_2.setText(_translate("Dialog", "Descrição:"))
        self.lineEdit.setPlaceholderText(_translate("Dialog", "Descrição Entrada"))
        self.label_3.setText(_translate("Dialog", "Adicionar Entrada"))
        self.AdicionarEntrada.setText(_translate("Dialog", "Adicionar"))
        self.CancelarEntrada.setText(_translate("Dialog", "Cancelar"))
        self.Saida.setPlaceholderText(_translate("Dialog", "Adicionar Entrada"))
        self.DescricaoSaida.setPlaceholderText(_translate("Dialog", "Descrição Entrada"))
        self.AdicionarSaida.setText(_translate("Dialog", "Adicionar"))
        self.label_4.setText(_translate("Dialog", "Descrição:"))
        self.label_5.setText(_translate("Dialog", "Saída:"))
        self.Cancelar.setText(_translate("Dialog", "Cancelar"))
        self.label_6.setText(_translate("Dialog", "Adicionar Saida"))
        self.entradaa.setText(_translate("Dialog", u"Entrada", None))
        self.saidaa.setText(_translate("Dialog", u"Saida", None))

    def addsaida(self):
        # Obtém a hora atual
        hora_atual = datetime.now()

# Formata a hora como uma string no formato HH:MM:SS
        hora_formatada = hora_atual.strftime("%H:%M:%S")    
        
        entrada = self.Saida.text()
        des = self.DescricaoSaida.text()
        hora = hora_formatada
    
        # Obtenha o nome da tabela desejada
        datedia1 = datetime.today().strftime("%d%m%Y")  # Adiciona o ano completo (com 4 dígitos)
        flux = f'flux{datedia1}'
        nome_tabela1 = f"dia_{datedia1}".replace('.', '_')

        # Conecte-se ao banco de dados
        conn = sqlite3.connect("vendas.db")
        cursor = conn.cursor()
        cursor.execute("INSERT INTO {} (Hora, Desc, Saida) VALUES (?, ?, ?)".format(nome_tabela1), (hora, des, entrada))
        conn.commit()

# Feche a conexão
        conn.close()

        self.limpar()
        self.fluxo()
    
    
    
    
    
    
    def addentrada(self):
        # Obtém a hora atual
        hora_atual = datetime.now()

# Formata a hora como uma string no formato HH:MM:SS
        hora_formatada = hora_atual.strftime("%H:%M:%S")    
        
        entrada = self.Entrada.text()
        des = self.lineEdit.text()
        hora = hora_formatada
    
        # Obtenha o nome da tabela desejada
        datedia1 = datetime.today().strftime("%d%m%Y")  # Adiciona o ano completo (com 4 dígitos)
        #flux = f'flux{datedia1}'
        nome_tabela1 = f"dia_{datedia1}".replace('.', '_')

        # Conecte-se ao banco de dados
        conn = sqlite3.connect("vendas.db")
        cursor = conn.cursor()
        cursor.execute("INSERT INTO {} (Hora, Descr, Entrada) VALUES (?, ?, ?)".format(nome_tabela1), (hora, des, entrada))
        conn.commit()

# Feche a conexão
        conn.close()

        self.limpar()
        self.fluxo()
    
    def limpar(self):
        self.Entrada.clear()
        self.lineEdit.clear()
        self.Saida.clear()
        self.DescricaoSaida.clear()
    
    
    def fluxo(self):
         # Obtenha o nome da tabela desejada
        datedia1 = datetime.today().strftime("%d%m%Y")  # Adiciona o ano completo (com 4 dígitos)
        #flux = f'flux{datedia1}'
        nome_tabela1 = f"dia_{datedia1}".replace('.', '_')

        # Conecte-se ao banco de dados
        conn = sqlite3.connect("vendas.db")
        cursor = conn.cursor()
        print(nome_tabela1)
        cursor.execute(f"SELECT SUM(Entrada) AS TotalEntrada, SUM(Saida) AS TotalSaida FROM {nome_tabela1}")
        soma = cursor.fetchone()  # Obtém o resultado da consulta
        total_entrada = soma[0] if soma[0] is not None else 0  # Soma de Entrada
        total_saida = soma[1] if soma[1] is not None else 0  # Soma de Saída
        self.lcdentrada.display(total_entrada)
        self.lcdsaida.display(total_saida)

        # Atualiza a coluna "Total" na linha 1 com o valor da soma
        cursor.execute(f"UPDATE {nome_tabela1} SET Total = {total_entrada - total_saida} WHERE rowid = 1")

        # Commit para salvar as alterações
        conn.commit()

       
       
        # Execute a consulta SQL para selecionar todos os dados da tabela
        cursor.execute(f"SELECT * FROM {nome_tabela1}")
        dados = cursor.fetchall()

        # Feche a conexão com o banco de dados
        conn.close()

        # Limpe o conteúdo da tabela existente
        self.tableWidget.setRowCount(0)

        # Preencha a tabela com os dados
        if dados:
            num_linhas = len(dados)
            num_colunas = len(dados[0])

            self.tableWidget.setRowCount(num_linhas)
            self.tableWidget.setColumnCount(num_colunas)

            for linha_idx, linha in enumerate(dados):
                for coluna_idx, valor in enumerate(linha):
                    item = QTableWidgetItem(str(valor))
                    self.tableWidget.setItem(linha_idx, coluna_idx, item)

            self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

            # Defina os nomes das colunas
            colunas = [str(coluna[0]) for coluna in cursor.description]
            self.tableWidget.setHorizontalHeaderLabels(colunas)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
