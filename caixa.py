# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'novo.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import sqlite3
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QLabel, QLineEdit, QMessageBox,QGridLayout,QSizePolicy,QLayout,QTableWidget,QShortcut, QTableWidgetItem
from PyQt5.QtCore import QCoreApplication, QSize,QMetaObject,Qt,QTimer
from datetime import datetime
from collections import Counter
import serial
from fluxo import Ui_Dialog
#from login import Ui_Login
import time
import win32print
#from login import Ui_Login
from PyQt5.QtGui import QPixmap
#from pynput.keyboard import Listener
from pynput.keyboard import Listener, Key
import serial.tools.list_ports

import requests
from fluxo import Ui_Dialog
from pesquisar import Ui_pesquisar


    

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1406, 772)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.gridLayout.setObjectName("gridLayout")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(22)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 9, 8, 1, 1)
        self.cancelar = QtWidgets.QPushButton(self.centralwidget)
        self.cancelar.setObjectName("cancelar")
        self.cancelar.clicked.connect(self.cancel)
        self.gridLayout.addWidget(self.cancelar, 10, 8, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(22)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 8, 8, 1, 1)
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(22)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 6, 8, 1, 1)
        self.valor_dinheiro = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.valor_dinheiro.sizePolicy().hasHeightForWidth())
        self.valor_dinheiro.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.valor_dinheiro.setFont(font)
        self.valor_dinheiro.setObjectName("valor_dinheiro")
        self.valor_dinheiro.textChanged.connect(self.troco)
        self.gridLayout.addWidget(self.valor_dinheiro, 5, 9, 1, 1)
        self.valor_dinheiro.setStyleSheet("border-radius: 20px; border: 2px solid #000000;")

        
        
        
        
        
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setObjectName("label_9")
        font = QtGui.QFont()
        font.setPointSize(22)
        self.label_9.setFont(font)
        
        self.gridLayout.addWidget(self.label_9, 2, 0, 1, 3)
        self.excluir = QtWidgets.QPushButton(self.centralwidget)
        self.excluir.setObjectName("excluir")
        self.excluir.clicked.connect(self.excluir_linha_selecionada)

        
        self.gridLayout.addWidget(self.excluir, 10, 2, 1, 2)
        self.quantidade = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.quantidade.sizePolicy().hasHeightForWidth())
        self.quantidade.setSizePolicy(sizePolicy)
        self.quantidade.setMinimumSize(QtCore.QSize(3, 0))
        self.quantidade.setBaseSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.quantidade.setFont(font)
        self.quantidade.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.quantidade.setPlaceholderText("")
        self.quantidade.setObjectName("quantidade")
        self.gridLayout.addWidget(self.quantidade, 1, 0, 1, 1)
        self.valor_troco = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.valor_troco.sizePolicy().hasHeightForWidth())
        self.valor_troco.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.valor_troco.setFont(font)
        self.valor_troco.setObjectName("valor_troco")
        self.valor_troco.setReadOnly(True)
        
        self.gridLayout.addWidget(self.valor_troco, 8, 9, 1, 1)
        self.pesquisar = QtWidgets.QPushButton(self.centralwidget)
        self.pesquisar.setObjectName("pesquisar")
        self.gridLayout.addWidget(self.pesquisar, 10, 0, 1, 2)
        self.pesquisar.clicked.connect(self.pesquisar_item)
        
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 7, 5, 3)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(22)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 7, 8, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(22)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.gridLayout.addWidget(self.label_8, 5, 8, 1, 1)
        self.entrada = QtWidgets.QPushButton(self.centralwidget)
        self.entrada.setObjectName("entrada")
        self.gridLayout.addWidget(self.entrada, 0, 4, 1, 1)
        self.entrada.clicked.connect(self.caixa)
        
        self.valor_cart = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.valor_cart.sizePolicy().hasHeightForWidth())
        self.valor_cart.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.valor_cart.setFont(font)
        self.valor_cart.setObjectName("valor_cart")
        self.gridLayout.addWidget(self.valor_cart, 6, 9, 1, 1)
        self.valor_cart.setStyleSheet("border-radius: 20px; border: 2px solid #000000;")

        self.lista_vendas = QtWidgets.QTableWidget(self.centralwidget)
        self.lista_vendas.setObjectName("lista_vendas")
        self.lista_vendas.setColumnCount(0)
        self.lista_vendas.setRowCount(0)
        font = QtGui.QFont()
        font.setPointSize(11)  # Definindo o tamanho da fonte para 30
        self.lista_vendas.setFont(font)

        
        self.gridLayout.addWidget(self.lista_vendas, 3, 0, 7, 7)
        self.relatorio_2 = QtWidgets.QPushButton(self.centralwidget)
        self.relatorio_2.setObjectName("relatorio_2")
        self.relatorio_2.clicked.connect(self.finalizando_vendas)
        self.gridLayout.addWidget(self.relatorio_2, 10, 9, 1, 1)
        
        self.relatorio = QtWidgets.QPushButton(self.centralwidget)
        self.relatorio.setObjectName("relatorio")
        self.gridLayout.addWidget(self.relatorio, 10, 4, 1, 1)
        self.relatorio.clicked.connect(self.relator)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 2, 1, 2)
        self.valor_pix = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.valor_pix.sizePolicy().hasHeightForWidth())
        self.valor_pix.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.valor_pix.setFont(font)
        self.valor_pix.setObjectName("valor_pix")
        self.gridLayout.addWidget(self.valor_pix, 7, 9, 1, 1)
        self.valor_pix.setStyleSheet("border-radius: 20px; border: 2px solid #000000;")
        self.valor_troco.setStyleSheet("border-radius: 20px; border: 2px solid #000000;")

        
        self.pesq_Produt = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pesq_Produt.sizePolicy().hasHeightForWidth())
        self.pesq_Produt.setSizePolicy(sizePolicy)
        self.pesq_Produt.setMinimumSize(QtCore.QSize(400, 0))
        font = QtGui.QFont()
        font.setPointSize(24)
        
        self.pesq_Produt.setFont(font)
        self.pesq_Produt.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pesq_Produt.setText("")
        self.pesq_Produt.setObjectName("pesq_Produt")
        
        self.pesq_Produt.returnPressed.connect(self.insert_product)

        
        
        self.gridLayout.addWidget(self.pesq_Produt, 1, 2, 1, 1)
        self.valor_total = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.valor_total.sizePolicy().hasHeightForWidth())
        self.valor_total.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.valor_total.setFont(font)
        self.valor_total.setReadOnly(True)
        self.valor_total.setObjectName("valor_total")
        self.valor_total.setStyleSheet("border-radius: 20px; border: 2px solid #000000;")

        
        self.gridLayout.addWidget(self.valor_total, 9, 9, 1, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label.setFont(font)
        self.label.setStyleSheet("")
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 2)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit.sizePolicy().hasHeightForWidth())
        self.lineEdit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(30)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.returnPressed.connect(self.insert_product)
        
        self.gridLayout.addWidget(self.lineEdit, 1, 4, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1406, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.lineEdit.setStyleSheet("border-radius: 20px; border: 2px solid #000000;")
        self.pesq_Produt.setStyleSheet("border-radius: 20px; border: 2px solid #000000;")
        self.quantidade.setStyleSheet("border-radius: 20px; border: 2px solid #000000;")
        self.lista_vendas.setStyleSheet("border-radius: 10px; border: 2px solid #000000;")
        #self.relatorio_2.setStyleSheet("border-radius: 20px; border: 20px solid #000000;")pull
        
        
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        caminho_imagem = "logo.png"  # ou o caminho completo, ex: "C:/caminho/para/logo.png"

# Crie um QPixmap com a imagem
        pixmap = QPixmap(caminho_imagem)
        self.label_3.setPixmap(pixmap)


        #Cria a tabela
        self.caixa1()
    
        MainWindow.setFocusPolicy(QtCore.Qt.StrongFocus)
        MainWindow.keyPressEvent = self.keyPressEvent

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_F2:  # Verifica se a tecla pressionada foi F3
            self.pesquisar_item()  # Chama a função self.teste()
        
        elif event.key() == Qt.Key_F3:  # Verifica se a tecla pressionada foi F3
            self.excluir_linha_selecionada()  # Chama a função self.teste()
            
        elif event.key() == Qt.Key_F4:  # Verifica se a tecla pressionada foi F3
            self.cancel()  # Chama a função self.teste()
            
        elif event.key() == Qt.Key_F1:  # Verifica se a tecla pressionada foi F3
            self.caixa()  # Chama a função self.teste()
        
        elif event.key() == Qt.Key_F6:  # Verifica se a tecla pressionada foi F3
            self.finalizando_vendas()  # Chama a função self.teste()
            
        elif event.key() == Qt.Key_F5:  # Verifica se a tecla pressionada foi F3
            self.relator()  # Chama a função self.teste()


    
    
    
    def pesquisar_item(self):
        self.window = QtWidgets.QDialog()
        self.ui = Ui_pesquisar()
        self.ui.setupUi(self.window)

        self.ui.adicionar_venda.clicked.connect(self.transfer)

        
        self.window.show()
    
    def caixa(self):
        self.window = QtWidgets.QDialog()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self.window)

        #self.ui.Confirmar.clicked.connect(self.transfer)

        
        self.window.show()
    
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_4.setText(_translate("MainWindow", "Total:"))
        self.cancelar.setText(_translate("MainWindow", "F4: Cancelar Venda"))
        self.label_5.setText(_translate("MainWindow", "Troco:"))
        self.label_7.setText(_translate("MainWindow", "Cartão:"))
        self.label_9.setText(_translate("MainWindow", "TextLabel"))
        self.excluir.setText(_translate("MainWindow", "F3: Excluir"))
        self.quantidade.setText(_translate("MainWindow", "1"))
        self.pesquisar.setText(_translate("MainWindow", "F2: Pesquisar"))

        self.label_3.setScaledContents(True)  # A imagem será redimensionada automaticamente para caber no QLabel
        self.label_6.setText(_translate("MainWindow", "Pix:"))
        self.label_8.setText(_translate("MainWindow", "Dinheiro:"))
        self.label_9.setText(_translate("MainWindow", "Caixa Livre:"))

        self.entrada.setText(_translate("MainWindow", "F1: Entrada/ Saida"))
        self.relatorio_2.setText(_translate("MainWindow", "F6:Finalizar Venda"))
        self.relatorio.setText(_translate("MainWindow", "F5: Relatorio"))
        self.label_2.setText(_translate("MainWindow", "Código/Produto:"))
        self.pesq_Produt.setPlaceholderText(_translate("MainWindow", "Produto"))
        self.label.setText(_translate("MainWindow", "Quantidade:"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "Peso:"))


    def relator(self):
        
        # Conecte-se ao banco de dados
        # Obtenha a data formatada
        datedia1 = datetime.today().strftime("%d%m%Y")  # Adiciona o ano completo (com 4 dígitos)
        parte_final = datedia1[-8:]

        # Crie o nome da tabela com base na parte final da data
        nome_tabela1 = f"vendas_{parte_final}".replace('.', '_')

        # Conecte-se ao banco de dados
        conn = sqlite3.connect("vendas.db")
        cursor = conn.cursor()

        # Execute a consulta SQL para calcular a soma da coluna "Entrada"
        cursor.execute(f"SELECT Hora, Cartao, Pix, Dinheiro, Total FROM {nome_tabela1} WHERE Total IS NOT NULL")

        # Obtém todas as linhas resultantes da consulta
        linhas = cursor.fetchall()

        # Crie strings para salvar os valores
        strings_hora_entrada = []
        soma_cartao = 0
        soma_pix = 0
        soma_dinheiro = 0
        total = 0
        # Itere pelas linhas e salve as informações desejadas nas strings
        for linha in linhas:
            hora,Cartao, Pix, Dinheiro,Total = linha
            soma_cartao += Cartao
            soma_pix += Pix
            soma_dinheiro += Dinheiro
            total += Total
            strings_hora_entrada.append(f"Hora: {hora}  Cartao:  R$:{Cartao}  Pix: R$:{Pix}  Dinheiro  R$:{Dinheiro}")

        # Feche a conexão com o banco de dados
        conn.close()

        # Agora, a lista 'strings_hora_entrada' contém as informações de hora e entrada das linhas onde "entrada" não é nulo
        for linha_str in strings_hora_entrada:
            print(linha_str)
        total_vend = soma_cartao + soma_dinheiro + soma_pix
        ports = list(serial.tools.list_ports.comports())

        # Verifica se há alguma porta disponível
        if ports:
            # Escolhe a primeira porta da lista (você pode personalizar a lógica de escolha)
            porta_serial = ports[0].device
        else:
            print("Nenhuma porta serial disponível.")
            # Aqui você pode tratar o caso de nenhuma porta estar disponível

        # Inicializa a conexão com a impressora
        #ser = serial.Serial(porta_serial, 9600)  # Substitua 9600 pela taxa de transmissão apropriada

        parte_final = datedia1[-8:]

        # Crie um modelo de impressão vazio
        modelo_impressao = f"""
                    Volte Sempre!!!
---------------------------------------------------------------------------
                         Relação Vendas - {parte_final}
                """
        for ent in strings_hora_entrada:   
            modelo_impressao += f"\n{ent}\n"
        modelo_impressao += f"\n Total Cartão: R$ {soma_cartao}  Total Pix: R$ {soma_pix}  Total Dinheiro: R$ {soma_dinheiro} \n Venda Total: R$ {total}"


        





        #cart= self.pagoLinha1.setText()
    # dinheiro= self.pagoLinhax.setText()



        # Comandos ESC/POS para imprimir o modelo
        comandos = [
            b'\x1B\x40',  # Inicializar a impressora
            b'\x1B\x61\x01',  # Centralizar o texto
            modelo_impressao.encode('utf-8'),
            b'\x1B\x61\x00',  # Alinhar o texto à esquerda
            b'\x0A',  # Avançar uma linha (pular)
            b'\x1D\x56\x01',  # Cortar o papel (parcial)
        ]

        # Enviar os comandos para a impressora
        #for comando in comandos:
            #ser.write(comando)
        #print('Imprimiu')
        # Fechar a conexão com a impressora
        #ser.close()


        # Salvar o resultado em um arquivo TXT
        with open('resultado.txt', 'w', encoding='utf-8') as file:
            file.write(modelo_impressao)

        # Abrir o arquivo TXT automaticamente
        import os
        os.system('notepad resultado.txt')

    def transfer(self):
       # Obtém os itens selecionados na tabela do UI
        selected_items = self.ui.tableView.selectedItems()

        # Verifica se algo foi selecionado
        if not selected_items:
            QtWidgets.QMessageBox.warning(self, "Aviso", "Nenhuma linha selecionada!")
            return

        # Pega a primeira célula (deve ser de uma linha inteira)
        selected_row = selected_items[0].row()

        # Extrai os dados da linha selecionada
        codigo_item = self.ui.tableView.item(selected_row, 0)  # Coluna "Código"
        nome_item = self.ui.tableView.item(selected_row, 1)    # Coluna "Nome"
        #quantidade - self.ui.tableView.item(selected_row, 2)
        preco_item = self.ui.tableView.item(selected_row, 3)   # Coluna "Preço"

        # Verifica se algum item da linha está vazio (None)
        codigo = codigo_item.text() if codigo_item else ""
        nome = nome_item.text() if nome_item else ""
        #quantidade = quantidade
        preco = float(preco_item.text()) if preco_item else ""
        print(codigo,nome,preco)
        produto = (codigo,nome,preco, preco)  # Tupla
        self.adicionar_produto_na_tabela1(produto)
        
        self.window.close()

      

    def adicionar_produto_na_tabela1(self, produto):
        self.label_9.setText('Venda em andamento...')
        total = 0

        # Obtém a quantidade e o peso do produto
        quantidade = int(self.ui.quantidade.text())  # quantidade de produtos
        peso = self.ui.lineEdit_2.text()  # peso produto

        # Certifique-se de que o QTableWidget tem as colunas corretas
        self.lista_vendas.setColumnCount(4)  # Corrigido para 4 colunas
        self.lista_vendas.setHorizontalHeaderLabels(["Código", "Nome", "Valor", "Valor KG"])  # Atualiza os cabeçalhos

        if peso:  # Se houver peso inserido
            try:
                total = float(peso)  # Tente converter peso para float
                bruto = produto[3] * total  # produto[2] é o preço unitário multiplicado pelo peso
            except ValueError:
                QMessageBox.warning(self, "Valor Inválido", "Por favor, insira um número válido para o peso.")
                return  # Para aqui se o peso não for válido
        else:
            bruto = 0  # Se não houver peso, bruto será 0

        # Adicionar a quantidade especificada de produtos
        for _ in range(quantidade):
            row_position = self.lista_vendas.rowCount()
            self.lista_vendas.insertRow(row_position)

            # Inserir as células com os valores do produto
            self.lista_vendas.setItem(row_position, 0, QtWidgets.QTableWidgetItem(str(produto[0])))  # Código
            self.lista_vendas.setItem(row_position, 1, QtWidgets.QTableWidgetItem(produto[1]))        # Nome
            self.lista_vendas.setItem(row_position, 2, QtWidgets.QTableWidgetItem(f"{produto[3]:.2f}"))  # Valor

        # Verifica se o valor bruto é maior que 0
            if bruto > 0:
                self.lista_vendas.setItem(row_position, 2, QtWidgets.QTableWidgetItem(f"{bruto:.2f}"))  # Insere o valor bruto se existir
                self.lista_vendas.setItem(row_position, 3, QtWidgets.QTableWidgetItem(f"{produto[3]:.2f}"))  # Valor
           
        for i in range(self.lista_vendas.columnCount()):
            self.lista_vendas.setColumnWidth(i, 238)
            self.lista_vendas.setRowHeight(i, 30)

        # Ajustar a altura das linhas ao conteúdo
        self.lista_vendas.resizeRowsToContents()  # Ajusta a altura das linhas ao conteúdo

        self.lineEdit.clear()  # Limpa o campo de peso
        self.quantidade.setText("1")  # Redefine a quantidade para 1
        self.pesq_Produt.clear()  # Limpa o campo de pesquisa de produtos


        total = 0
        for row in range(self.lista_vendas.rowCount()):
            item = self.lista_vendas.item(row, 2)  # Coluna "Valor" (assumindo que seja a terceira coluna)
            if item is not None:
                valor_texto = item.text()
                try:
                    valor = float(valor_texto)
                    total += valor
                except ValueError:
                    pass  # Ignora valores que não podem ser convertidos para float

        # Formata o valor total com um ponto decimal
            total_formatado = "{:.2f}".format(total)  # Exibe dois dígitos após o ponto decimal

        # Atualiza o QLCDNumber com o valor total formatado
        
            self.valor_total.setText(total_formatado)
            self.troco()       
        
    def finalizando_vendas(self):
        conn = sqlite3.connect("vendas.db")
        cursor = conn.cursor()
        data = datetime.now().strftime("%H:%M:%S")
        soma = 0.0
        datedia = datetime.today().strftime("%d%m%Y")  # Por exemplo, "20231011" para 11 de outubro de 2023

        # Adicione um prefixo ao nome da tabela
        nome_tabela = f"vendas_{datedia}"

        # Verifique se a tabela já existe
        conn = sqlite3.connect("vendas.db")
        cursor = conn.cursor()
        cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name=?", (nome_tabela,))
        tabela_existente = cursor.fetchone() is not None
        conn.close()  # Feche a conexão

        if not tabela_existente:
            # Se a tabela não existir, crie-a
            conn = sqlite3.connect("vendas.db")
            cursor = conn.cursor()
            
            cursor.execute(f'''CREATE TABLE {nome_tabela} (
                                Hora TEXT,
                                Produto TEXT,
                                Valor REAL,
                                Cartao REAL,
                                Pix REAL,
                                Dinheiro REAL,
                                Total REAL
                            )''')
            
            
            # Commit para salvar as alterações e fechar a conexão
            conn.commit()
            conn.close()
        
        connection = sqlite3.connect('vendas.db')
        cursor = connection.cursor()

        # Crie um dicionário com a contagem de cada produto no QTableWidget
        product_count = Counter(self.lista_vendas.item(row, 1).text() for row in range(self.lista_vendas.rowCount()))

        for row in range(self.lista_vendas.rowCount()):
            connection = sqlite3.connect('vendas.db')
            cursor = connection.cursor()
            product_name = self.lista_vendas.item(row, 1).text()  # Obtém o nome do produto

            # Atualize a tabela de produtos no banco de dados subtraindo 1 da coluna "Quantidade"
            update_query = "UPDATE produtos SET Quantidade = Quantidade - 1 WHERE Produto = ?"
            cursor.execute(update_query, (product_name,))

            # Commit das alterações no banco de dados a cada atualização
            connection.commit()

    # Feche a conexão com o banco de dados
            connection.close()


        
        conn = sqlite3.connect("vendas.db")
        cursor = conn.cursor()
        data = datetime.now().strftime("%H:%M:%S")
        soma = 0.0 
        qlinha1_valor = float(self.valor_cart.text()) if self.valor_cart.text() else 0.0
        
        
        qlinha2_valor = float(self.valor_dinheiro.text()) if self.valor_dinheiro.text() else 0.0
        valor_dinheiro11 = float(self.valor_dinheiro.text()) if self.valor_dinheiro.text() else 0.0



        
        
        
        
        qlinha3_valor =float(self.valor_pix.text()) if self.valor_pix.text() else 0.0
        total_valor = float(self.valor_total.text()) if self.valor_total.text() else 0.0 
        
        valor_cartao = self.valor_cart.text()
        if not valor_cartao:  # Verifica se o texto está vazio
            valor_cartao = 0
        valor_dinheiro = float(self.valor_dinheiro.text())
        if  valor_dinheiro > 0:
            valor_dinheiro = total_valor
        else:
            valor_dinheiro = 0
        valor_pix = self.valor_pix.text()
        if not valor_pix:
            valor_pix = 0
        troco_valor = qlinha3_valor + qlinha1_valor + qlinha2_valor - total_valor
        if not troco_valor:
            troco_valor = 0
        valor_dinheiro1 = float(valor_dinheiro) - float(troco_valor)


        
        for row in range(self.lista_vendas.rowCount()):
            valor_item = self.lista_vendas.item(row, 2)  # Assumindo que a coluna "valor" é a terceira coluna (índice 2)
            if valor_item is not None:
                valor = float(valor_item.text())
                soma += valor
                
                self.lista_vendas.setItem(row, 3, QTableWidgetItem(valor_cartao))

        # Adicione os valores de self.qline2 à coluna "Dinheiro" (por exemplo, a coluna 4)
                self.lista_vendas.setItem(row, 4, QTableWidgetItem(str(valor_dinheiro)))

        soma_str = str(soma) 
        insert_hora_total ="INSERT INTO {} (Hora,Total,Cartao,Dinheiro, Pix) VALUES (?,?,?,?,?)".format(nome_tabela) 
        cursor.execute(insert_hora_total, (data, soma_str,valor_cartao,valor_dinheiro, valor_pix ))
            
        
         # Adicione os valores de self.qline1 à coluna "Cartão" (por exemplo, a coluna 3)
                
        
        for row in range(self.lista_vendas.rowCount()):
            #odigo = self.telaprodutos.item(row, 0).text()
            nome = self.lista_vendas.item(row, 1).text()
            valor = float(self.lista_vendas.item(row, 2).text())

            # Insira cada produto na tabela "Vendas" individualmente
            insert_produto_valor = "INSERT INTO {} (Produto, Valor) VALUES (?, ?)".format(nome_tabela)
            cursor.execute(insert_produto_valor, (nome, valor))


        # Commit para salvar as alterações e fechar a conexão
        conn.commit()
        conn.close()
        #####################################Impresora#################################################
        #ser = serial.Serial('COM1', baudrate=9600, timeout=1)
        data_hoje = datetime.now()
        hora_atual = datetime.now().time()

        # Formatando a data para o formato desejado
        data_formatada_1 = data_hoje.strftime("%d/%m/%Y")
        # Crie um modelo de impressão vazio
        modelo_impressao = f"""
                        Nome mercado
                    Volte Sempre!!!
                Endereco
        Data: {str(data_formatada_1)}  Hora:{hora_atual}

            ------------------------------------
    Código             Produto                     Valor

"""

        # Suponha que self.tableWidget seja o seu QTableWidget
        for row in range(self.lista_vendas.rowCount()):
            codigo = self.lista_vendas.item(row, 0).text()
            produto = self.lista_vendas.item(row, 1).text()
            valor = self.lista_vendas.item(row, 2).text()

            # Calcule o número de espaços necessários para alinhar os valores
            espacos_produto = " " * (18 - len(produto))
            espacos_valor = " " * (30 - len(valor))

            # Adicione dinamicamente cada linha de produto com espaços alinhados
            modelo_impressao += f"\n{codigo.ljust(10)} {produto.ljust(30)} {valor}"

        # Calcule o valor total (substitua com sua lógica real)
        total = 0.0
        for row in range(self.lista_vendas.rowCount()):
            valor = float(self.lista_vendas.item(row, 2).text())
            total += valor

        # Adicione o valor total ao modelo de impressão
        modelo_impressao += f"\n    ------------------------------ \n                   Total: R$ {total:.2f}"
 
        #pix = self.pagoLinha.setText()
        modelo_impressao += f"\n                Cartão: R$ {float(valor_cartao):.2f}"
        modelo_impressao += f"\n                Pix: R$ {float(valor_pix):.2f}"
        modelo_impressao += f"\n                Dinheiro: R$ {float(valor_dinheiro11):.2f}"
        modelo_impressao += f"\n                Troco: R$ {float(troco_valor):.2f}"
        modelo_impressao += f"\n                Obrigado! Volte sempre!"
        #modelo_impressao += f"\n  7 dias para troca!"
        #modelo_impressao += f"\nData: {str(data_formatada_1)}"



        #cart= self.pagoLinha1.setText()
       # dinheiro= self.pagoLinhax.setText()



        # Comandos ESC/POS para imprimir o modelo
        comandos = [
            b'\x1B\x40',  # Inicializar a impressora
            b'\x1B\x61\x01',  # Centralizar o texto
            modelo_impressao.encode('utf-8'),
            b'\x1B\x61\x00',  # Alinhar o texto à esquerda
            b'\x0A',  # Avançar uma linha (pular)
            b'\x1D\x56\x01',  # Cortar o papel (parcial)
        ]

        # Enviar os comandos para a impressora
        #for comando in comandos:
            #ser.write(comando)
        #print('Imprimiu')
        # Fechar a conexão com a impressora
        #ser.close()
        # Obter a impressora padrão
        impressora_padrao = win32print.GetDefaultPrinter()

        # Imprimir na impressora padrão
        hprinter = win32print.OpenPrinter(impressora_padrao)
        try:
            win32print.StartDocPrinter(hprinter, 1, ("Documento", None, "RAW"))
            win32print.StartPagePrinter(hprinter)
            win32print.WritePrinter(hprinter, modelo_impressao.encode('utf-8'))
            win32print.EndPagePrinter(hprinter)
            win32print.EndDocPrinter(hprinter)
        finally:
            win32print.ClosePrinter(hprinter)

                # Salvar o resultado em um arquivo TXT
            with open('resultado.txt', 'w', encoding='utf-8') as file:
                    file.write(modelo_impressao)

        # Abrir o arquivo TXT automaticamente
        import os
        os.system('notepad resultado.txt')
        self.cancel()


    def cancel(self):
        self.valor_dinheiro.clear()
        self.valor_cart.clear()
        self.valor_pix.clear()
        self.valor_troco.clear()
        self.valor_total.clear()
        self.lista_vendas.clearContents()
        self.lista_vendas.setRowCount(0)
        self.lista_vendas.setColumnCount(0)
        self.label_9.setText('Caixa Livre:')
    
    def caixa1 (self):
        datedia1 = datetime.today().strftime("%d%m%Y")  # Adiciona o ano completo (com 4 dígitos)
        #flux= (f'flux{datedia1}')
        # Adicione um prefixo ao nome da tabela
        nome_tabela1 = f"dia_{datedia1}".replace('.', '_')
        # Verifique se a tabela já existe
        conn = sqlite3.connect("vendas.db")
        cursor = conn.cursor()
        cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name=?", (nome_tabela1,))
        tabela_existente = cursor.fetchone() is not None
        conn.close()  # Feche a conexão

        if not tabela_existente:
            # Se a tabela não existir, crie-a
            conn = sqlite3.connect("vendas.db")
            cursor = conn.cursor()
            
            cursor.execute(f'''CREATE TABLE {nome_tabela1} (
                                Hora TEXT,
                                Descr Entrada TEXT,
                                Entrada REAL,
                                Desc Saida REAL,
                                Saida REAL,
                                Total REAL
                            )''')
            
            # Commit para salvar as alterações e fechar a conexão
            conn.commit()
            conn.close()
    
    
    def excluir_linha_selecionada(self):
        """Exclui a linha selecionada da tabela."""
        linha_selecionada = self.lista_vendas.currentRow()

        if linha_selecionada == -1:
            # Exibe uma mensagem simples de erro diretamente no console
            print("Nenhuma linha selecionada!")
            return

        # Confirmação simples via console
        print(f"Excluindo a linha {linha_selecionada + 1}...")
        self.lista_vendas.removeRow(linha_selecionada)
        
        total = 0.0
        for row in range(self.lista_vendas.rowCount()):
            item = self.lista_vendas.item(row, 2)  # Coluna "Valor" (assumindo que seja a terceira coluna)
            if item is not None:
                valor_texto = item.text()
                try:
                    valor = float(valor_texto)
                    total += valor
                except ValueError:
                    pass  # Ignora valores que não podem ser convertidos para float

        # Formata o valor total com um ponto decimal
            total_formatado = "{:.2f}".format(total)  # Exibe dois dígitos após o ponto decimal

        # Atualiza o QLCDNumber com o valor total formatado
        
            self.valor_total.setText(total_formatado)
            self.troco()

    def troco(self):
            
        if self.valor_dinheiro.text() and float(self.valor_dinheiro.text()) > 0:  # Verifica se o valor é maior que zero
            try:
                # Converte os valores em ponto flutuante, usando 0.0 como padrão caso o campo esteja vazio
                qlinha1_valor = float(self.valor_dinheiro.text()) if self.valor_dinheiro.text() else 0.0
                qlinha2_valor = float(self.valor_cart.text()) if self.valor_cart.text() else 0.0
                qlinha3_valor = float(self.valor_pix.text()) if self.valor_pix.text() else 0.0
                total_valor = float(self.valor_total.text()) if self.valor_total.text() else 0.0

                # Calcula o troco
                troco_valor = qlinha3_valor + qlinha1_valor + qlinha2_valor - total_valor
                self.valor_troco.setText(f"{troco_valor:.2f}")
            except ValueError:
                # Tratar o caso em que a entrada não é um número válido
                print("Erro: Os valores inseridos não são válidos.")
    
    #ir pra lista de venda
    def insert_product(self):
        texto_pesquisa = self.pesq_Produt.text()
        if texto_pesquisa:
            try:
                # Conectar ao banco de dados
                conn = sqlite3.connect('vendas.db')
                cursor = conn.cursor()

                # 1. Primeiro, tente pesquisar pelo código exato
                cursor.execute("SELECT * FROM produtos WHERE codigo = ?", (texto_pesquisa,))
                produto = cursor.fetchone()
                print(produto)

                if produto:
                    # Produto foi encontrado pelo código
                    self.adicionar_produto_na_tabela(produto)
                else:
                    # 2. Se não encontrou pelo código, tente buscar pelo nome exato
                    cursor.execute("SELECT * FROM produtos WHERE produto = ?", (texto_pesquisa,))
                    produto = cursor.fetchone()

                    if produto:
                        # Produto foi encontrado pelo nome exato
                        self.adicionar_produto_na_tabela(produto)
                    else:
                        # 3. Se não encontrou pelo nome exato, busca pelo nome mais semelhante
                        cursor.execute("SELECT * FROM produtos WHERE produto LIKE ?", ('%' + texto_pesquisa + '%',))
                        produto = cursor.fetchone()
                        print(produto)

                        if produto:
                            # Produto mais semelhante foi encontrado
                            self.adicionar_produto_na_tabela(produto)
                        else:
                            # Nenhum produto foi encontrado
                            self.mostrar_mensagem("Nenhum produto encontrado.")

                conn.close()

            except sqlite3.Error as e:
                self.mostrar_mensagem(f"Erro ao acessar o banco de dados: {e}")
        else:
            self.mostrar_mensagem("Digite um nome ou código de produto para pesquisar.")
    
    def adicionar_produto_na_tabela(self, produto):
        self.label_9.setText('Venda em andamento...')
        total = 0

        # Obtém a quantidade e o peso do produto
        quantidade = int(self.quantidade.text())  # quantidade de produtos
        peso = self.lineEdit.text()  # peso produto

        # Certifique-se de que o QTableWidget tem as colunas corretas
        self.lista_vendas.setColumnCount(4)  # Corrigido para 4 colunas
        self.lista_vendas.setHorizontalHeaderLabels(["Código", "Nome", "Valor", "Valor KG"])  # Atualiza os cabeçalhos

        if peso:  # Se houver peso inserido
            try:
                total = float(peso)  # Tente converter peso para float
                bruto = produto[3] * total  # produto[2] é o preço unitário multiplicado pelo peso
            except ValueError:
                QMessageBox.warning(self, "Valor Inválido", "Por favor, insira um número válido para o peso.")
                return  # Para aqui se o peso não for válido
        else:
            bruto = 0  # Se não houver peso, bruto será 0

        # Adicionar a quantidade especificada de produtos
        for _ in range(quantidade):
            row_position = self.lista_vendas.rowCount()
            self.lista_vendas.insertRow(row_position)

            # Inserir as células com os valores do produto
            self.lista_vendas.setItem(row_position, 0, QtWidgets.QTableWidgetItem(str(produto[0])))  # Código
            self.lista_vendas.setItem(row_position, 1, QtWidgets.QTableWidgetItem(produto[1]))        # Nome
            self.lista_vendas.setItem(row_position, 2, QtWidgets.QTableWidgetItem(f"{produto[3]:.2f}"))  # Valor

        # Verifica se o valor bruto é maior que 0
            if bruto > 0:
                self.lista_vendas.setItem(row_position, 2, QtWidgets.QTableWidgetItem(f"{bruto:.2f}"))  # Insere o valor bruto se existir
                self.lista_vendas.setItem(row_position, 3, QtWidgets.QTableWidgetItem(f"{produto[3]:.2f}"))  # Valor
           
        for i in range(self.lista_vendas.columnCount()):
            self.lista_vendas.setColumnWidth(i, 238)
            self.lista_vendas.setRowHeight(i, 30)

        # Ajustar a altura das linhas ao conteúdo
        self.lista_vendas.resizeRowsToContents()  # Ajusta a altura das linhas ao conteúdo

        self.lineEdit.clear()  # Limpa o campo de peso
        self.quantidade.setText("1")  # Redefine a quantidade para 1
        self.pesq_Produt.clear()  # Limpa o campo de pesquisa de produtos


        total = 0
        for row in range(self.lista_vendas.rowCount()):
            item = self.lista_vendas.item(row, 2)  # Coluna "Valor" (assumindo que seja a terceira coluna)
            if item is not None:
                valor_texto = item.text()
                try:
                    valor = float(valor_texto)
                    total += valor
                except ValueError:
                    pass  # Ignora valores que não podem ser convertidos para float

        # Formata o valor total com um ponto decimal
            total_formatado = "{:.2f}".format(total)  # Exibe dois dígitos após o ponto decimal

        # Atualiza o QLCDNumber com o valor total formatado
        
            self.valor_total.setText(total_formatado)
            self.troco()



    def mostrar_mensagem(self, mensagem):
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Information)
        msg.setText(mensagem)
        msg.setWindowTitle("Aviso")
        msg.exec_()



if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())